module Test.LabourService where

import Trader.LabourService
import Trader.Account

import Daml.Script

test_make_service_agreement = script do
  alice <- allocateParty("Alice")
  bob <- allocateParty("Bob")
  bank <- allocateParty("Bank")

  requirementCid <- submit alice $ createCmd LabourServiceRequirement with
    owner =  alice
    intermediary = bank
    description = "This is the requirement"
    guarantee = 100.0
    public = bob

  quoteCid <- submit bob $ exerciseCmd requirementCid Make_LabourServiceQuote with
    provider = bob
    price = 300.0
  
  agreementCid <- submit alice $ exerciseCmd quoteCid LabourServiceQuote_Select
  Some agreementContent <- queryContractId bank agreementCid
  assert (agreementContent.status == Pending)

test_freeze_funds_after_agreement = script do
  alice <- allocateParty("Alice")
  bob <- allocateParty("Bob")
  bank <- allocateParty("Bank")
  
  submit bank $ createCmd Account with username = alice, issuer = bank, balance = 1000.0
  submit bank $ createCmd Account with username = bob, issuer = bank, balance = 1000.0

  requirementCid <- submit alice $ createCmd LabourServiceRequirement with
    owner = alice
    intermediary = bank
    description = "This is the requirement"
    guarantee = 100.0
    public = bob

  quoteCid <- submit bob $ exerciseCmd requirementCid Make_LabourServiceQuote with
    provider = bob
    price = 300.0
  
  agreementCid <- submit alice $ exerciseCmd quoteCid LabourServiceQuote_Select
  agreementCid <- submit bank $ exerciseCmd agreementCid LabourServiceAgreement_FreezeFunds

  Some agreementContent <- queryContractId bank agreementCid
  assert (agreementContent.status == Ready_For_Work)

  (cid, account) <- submit bank do
    createAndExerciseCmd (AccountHelper with p = bank) (FetchAccountByKey (bob, bank))
  assert (account.balance == 900.0)
  (cid, account) <- submit bank do
    createAndExerciseCmd (AccountHelper with p = bank) (FetchAccountByKey (alice, bank))
  assert (account.balance == 700.0)

test_full_lifecycle = script do
  alice <- allocateParty("Alice")
  bob <- allocateParty("Bob")
  bank <- allocateParty("Bank")
  
  submit bank $ createCmd Account with username = alice, issuer = bank, balance = 1000.0
  submit bank $ createCmd Account with username = bob, issuer = bank, balance = 1000.0

  requirementCid <- submit alice $ createCmd LabourServiceRequirement with
    owner = alice
    intermediary = bank
    description = "This is the requirement"
    guarantee = 100.0
    public = bob

  quoteCid <- submit bob $ exerciseCmd requirementCid Make_LabourServiceQuote with
    provider = bob
    price = 300.0
  
  agreementCid <- submit alice $ exerciseCmd quoteCid LabourServiceQuote_Select
  agreementCid <- submit bank $ exerciseCmd agreementCid LabourServiceAgreement_FreezeFunds
  agreementCid <- submit bob $ exerciseCmd agreementCid LabourServiceAgreement_MarkReady
  agreementCid <- submit alice $ exerciseCmd agreementCid LabourServiceAgreement_MarkReviewed
  agreementCid <- submit bank $ exerciseCmd agreementCid LabourServiceAgreement_MakePayment

  (cid, account) <- submit bank do
    createAndExerciseCmd (AccountHelper with p = bank) (FetchAccountByKey (bob, bank))
  assert (account.balance == 1300.0)
