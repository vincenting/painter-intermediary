module Trader.LabourService where

import Trader.Account

template LabourServiceRequirement
  with
    owner: Party
    intermediary: Party
    public: Party
    guarantee: Decimal
    description: Text
  where
    signatory owner
    observer intermediary, public
    ensure guarantee > 0.0

    choice Archives: ()
      controller owner
      do
        return ()

    nonconsuming choice Make_LabourServiceQuote: ContractId LabourServiceQuote with 
        provider: Party
        price: Decimal
      controller provider
      do
        assertMsg "Requirement owners can not make quote for themselves" (owner /= provider)
        create LabourServiceQuote with
          provider
          requirementCid = self
          labourAgreement = LabourServiceAgreement with
            status = Pending
            provider
            requirement = this
            price


template LabourServiceQuote
  with
    provider: Party
    requirementCid: ContractId LabourServiceRequirement
    labourAgreement: LabourServiceAgreement
  where
    signatory provider
    observer labourAgreement.requirement.owner

    choice LabourServiceQuote_Cancel: ()
      controller provider
      do
        return ()
    
    choice LabourServiceQuote_Select: ContractId LabourServiceAgreement 
      with
      controller labourAgreement.requirement.owner
      do
        exercise requirementCid Archives
        create labourAgreement


data ServiceStatus
  = Pending
  | Ready_For_Work
  | Ready_For_Review
  | Ready_For_Payment
    deriving (Show, Eq)


template LabourServiceAgreement
  with
    requirement: LabourServiceRequirement
    provider: Party
    price: Decimal
    status: ServiceStatus
  where
    signatory (signatory requirement), provider
    observer requirement.intermediary

    ensure price > 0.0

    choice LabourServiceAgreement_FreezeFunds: ContractId LabourServiceAgreement with
      controller requirement.intermediary
      do
        assertMsg "Can't freee funds from participants multi time" (status == Pending)

        (userAccountCid, userAccount) <- createAndExercise
          (AccountHelper with p = requirement.intermediary) 
          (FetchAccountByKey (requirement.owner, requirement.intermediary))
        exercise userAccountCid Account_MakeTransaction with amount = -price

        (labourAccountCid, labourAccount) <- createAndExercise
          (AccountHelper with p = requirement.intermediary) 
          (FetchAccountByKey (provider, requirement.intermediary))
        exercise labourAccountCid Account_MakeTransaction with amount = -(requirement.guarantee)

        create this with status = Ready_For_Work

    choice LabourServiceAgreement_MarkReady: ContractId LabourServiceAgreement with
      controller provider
      do
        assertMsg "Only can mark work done when it's ready for work" (status == Ready_For_Work)
        create this with status = Ready_For_Review

    choice LabourServiceAgreement_MarkReviewed: ContractId LabourServiceAgreement with
      controller requirement.owner
      do
        assertMsg "Only can mark work reviewed when it's ready for review" (status == Ready_For_Review)
        create this with status = Ready_For_Payment
    
    choice LabourServiceAgreement_MakePayment: () with
      controller requirement.intermediary
      do
        assertMsg "Only can make payment when the work is reviewed" (status == Ready_For_Payment)

        (labourAccountCid, labourAccount) <- createAndExercise
          (AccountHelper with p = requirement.intermediary) 
          (FetchAccountByKey (provider, requirement.intermediary))
        exercise labourAccountCid Account_MakeTransaction with amount = (requirement.guarantee + price)
  
        return ()